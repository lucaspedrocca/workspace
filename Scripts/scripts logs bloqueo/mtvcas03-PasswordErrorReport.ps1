#######################################
# Generated by Javier Jallaza Chehade #
#######################################

#Name: PasswordErrorReport
#Log Type: IISW3WC

Param(
    [parameter(Mandatory=$false)]
    [Bool]$AutoOpen,
	[parameter(Mandatory=$false)]
    [String]$OutFile,
	[parameter(Mandatory=$false)]
    [Bool]$IgnoreInParams,
	[parameter(Mandatory=$false)]
    [Bool]$IgnoreOutParams
)

$currentDate = Get-Date
$formattedDate = $currentDate.ToString("yyyyMMddHHmm")

$Error.Clear()
$DefaultFolder = $PSScriptRoot
$Destination = "$formattedDate-mtvcas03-W3SVC1-PasswordErrorReport.CSV"
$Destination = $DefaultFolder + "\" + $Destination

if ($OutFile -ne [String]::Empty)
{
	$OutFileType = [System.IO.Path]::GetExtension($OutFile.ToUpper())
	$OriginalFileType = [System.IO.Path]::GetExtension($Destination.ToUpper())
	if ($OutFileType -ne $OriginalFileType) {
		Write-Host "You have chosen" $OutFileType "as the output, but this script was originally generated as" $OriginalFileType -ForegroundColor Red
		Write-Host "Either change -OutFile to" $OriginalFileType "or generate the script again with the output as" $OutFileType  -ForegroundColor Red
		Write-Host "You can also modify the OutputFormat variable in this script to match the correct Log Parser 2.2 COM output format." -ForegroundColor Red
		[System.Environment]::NewLine
		return
	} else {
		if ($true -ne $OutFile.Contains("\")) {
		  $Destination = $DefaultFolder + "\" + $OutFile
		} else {
		  $Destination = $OutFile
		}
	}
}

# Inicia el cron贸metro
$startTime = Get-Date

# Funci贸n para mostrar el tiempo transcurrido
function Show-ElapsedTime {
    $currentTime = Get-Date
    $elapsedTime = $currentTime - $startTime
    Write-Host ("Tiempo transcurrido: {0:hh\:mm\:ss}" -f $elapsedTime) -NoNewline
    Write-Host "`r"
}

# Configura el temporizador para actualizar el tiempo transcurrido
$timer = [System.Timers.Timer]::new(1000)
$timer.AutoReset = $true
$timer.add_Elapsed({ Show-ElapsedTime })
$timer.Start()

$LogQuery = New-Object -ComObject "MSUtil.LogQuery"
$InputFormat = New-Object -ComObject "MSUtil.LogQuery.IISW3CInputFormat"
$OutputFormat = New-Object -ComObject "MSUtil.LogQuery.CSVOutputFormat"

if ($IgnoreInParams -eq $false) {
     $InputFormat.iCodePage = 0
     $InputFormat.recurse = -1
     $InputFormat.minDateMod = "1900-01-01 12:00:00"
     $InputFormat.dirTime = 0
     $InputFormat.consolidateLogs = 1
     $InputFormat.useDirectiveDateTime = 0
     $InputFormat.useDoubleQuotes = 0
}

if ($IgnoreOutParams -eq $false) {
     $OutputFormat.Headers = "AUTO"
     $OutputFormat.oDQuotes = "AUTO"
     $OutputFormat.tabs = 0
     $OutputFormat.oTsFormat = "yyyy-MM-dd hh:mm:ss"
     $OutputFormat.oCodepage = 0
     $OutputFormat.fileMode = 1
}

Write-Progress -Activity "Executing query, please wait..."  -Status " "

$SQLQuery = "SELECT TOP 10000 Date As Date, Time As Time, TO_LOWERCASE (cs-username) AS User, COUNT(*) AS Hits, c-ip AS IpAddress, cs(User-Agent) AS User-Agent, sc-win32-status AS ErrorCode, WIN32_ERROR_DESCRIPTION(sc-win32-status) as Reason  INTO '" + $Destination + "' FROM  '\\mtvcas03.metrovias.com.ar\c$\inetpub\logs\LogFiles\W3SVC1\*.log' WHERE sc-win32-status = '1317' or /* user doesn't exist */ sc-win32-status = '1315' or /* invalid_account_name */ sc-win32-status = '1323' or /* wrong password */ sc-win32-status = '1326' or /* wrong password */ sc-win32-status = '1330' or /* password expired */ sc-win32-status = '1327' or /* account restriction*/ sc-win32-status = '1331' or /* account disabled */ sc-win32-status = '1304' or /* NULL_LM_PASSWORD */ sc-win32-status = '1909' /* account locked out */ GROUP BY User, User-Agent, ErrorCode, Reason , IPAddress, Date, time ORDER BY date,time DESC /* WIN32_ERROR_DESCRIPTION( win32ErrorCode <INTEGER> ) */ "
$rtnVal = $LogQuery.ExecuteBatch($SQLQuery, $InputFormat, $OutputFormat);
$OutputFormat = $null;
$InputFormat = $null;
$LogQuery = $null;

# Detener el temporizador
$timer.Stop()

if ($AutoOpen) {
	try {
		Start-Process($Destination)
	} catch {
		Write-Host $_.Exception.Message  -ForegroundColor Red
		Write-Host $_.Exception.GetType().FullName  -ForegroundColor Red
		Write-Host "NOTE: No output file will be created if the query returned zero records!"  -ForegroundColor Gray
	}	
}

# Mostrar el tiempo total de ejecuci贸n al finalizar el script
$endTime = Get-Date
$totalElapsedTime = $endTime - $startTime
Write-Host ("Tiempo total de ejecuci贸n: {0:hh\:mm\:ss}" -f $totalElapsedTime)